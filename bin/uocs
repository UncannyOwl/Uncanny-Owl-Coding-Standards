#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if terminal supports colors
if [ -t 1 ]; then
    SUPPORTS_COLORS=1
else
    SUPPORTS_COLORS=0
fi

# Function to echo with color
colorize() {
    if [ $SUPPORTS_COLORS -eq 1 ]; then
        echo -e "$1$2${NC}"
    else
        echo "$2"
    fi
}

# Debug mode
DEBUG=${DEBUG:-0}

# Function to print debug information
debug() {
    if [ "$DEBUG" -eq 1 ]; then
        colorize "$YELLOW" "DEBUG: $1"
    fi
}

# Version
VERSION="1.1"

colorize "$GREEN" "Uncanny Owl Coding Standards\nVersion ${VERSION}\n"

# Resolve paths in a cross-platform way
realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Try to find phpcs in different locations
PHPCS_LOCATIONS=(
    # Local installation
    "${SCRIPT_DIR}/../vendor/bin/phpcs"
    # Composer global installation
    "${HOME}/.composer/vendor/bin/phpcs"
    # Global installation
    "/usr/local/bin/phpcs"
    # Windows Composer global installation
    "${APPDATA}/Composer/vendor/bin/phpcs"
)

PHPCS_BIN=""
for location in "${PHPCS_LOCATIONS[@]}"; do
    if [[ -f "$location" ]]; then
        PHPCS_BIN="$location"
        break
    elif [[ -f "${location}.bat" ]]; then
        PHPCS_BIN="${location}.bat"
        break
    fi
done

if [ -z "${PHPCS_BIN}" ]; then
    colorize "$RED" "Error: PHP_CodeSniffer not found!"
    colorize "$YELLOW" "Please ensure PHP_CodeSniffer is installed either:"
    echo "  - Locally via 'composer install'"
    echo "  - Globally via 'composer global require squizlabs/php_codesniffer'"
    exit 1
fi

# Check PHP_CodeSniffer version
PHPCS_VERSION=$("${PHPCS_BIN}" --version | cut -d ' ' -f 3)
if [ $(echo "$PHPCS_VERSION" | cut -d. -f1) -lt 3 ]; then
    echo -e "${RED}Error: PHP_CodeSniffer version 3.0.0 or higher is required.${NC}"
    exit 1
fi

# Try to find standards directory
STANDARDS_LOCATIONS=(
    # Local installation
    "${SCRIPT_DIR}/../Uncanny-Owl"
    # Composer global installation
    "${HOME}/.composer/vendor/uocs/uncanny-owl-coding-standards/Uncanny-Owl"
    # Global installation
    "/usr/local/share/uocs/Uncanny-Owl"
)

STANDARDS_DIR=""
for location in "${STANDARDS_LOCATIONS[@]}"; do
    if [[ -f "${location}/ruleset.xml" ]]; then
        STANDARDS_DIR="$location"
        break
    fi
done

if [ -z "${STANDARDS_DIR}" ]; then
    echo -e "${RED}Error: Uncanny Owl Coding Standards not found!${NC}"
    echo -e "${YELLOW}Please ensure the standards are properly installed.${NC}"
    exit 1
fi

# Find vendor directory based on phpcs location
VENDOR_DIR=$(dirname $(dirname "${PHPCS_BIN}"))
debug "Vendor directory: ${VENDOR_DIR}"

# Clear PHPCS cache
"${PHPCS_BIN}" --config-delete cache > /dev/null 2>&1

# Set installed paths for standards
INSTALLED_PATHS=(
    "${VENDOR_DIR}/phpcsstandards/phpcsutils"
    "${VENDOR_DIR}/phpcsstandards/phpcsextra"
    "${VENDOR_DIR}/wp-coding-standards/wpcs"
    "${VENDOR_DIR}/phpcompatibility/php-compatibility"
    "${VENDOR_DIR}/phpcompatibility/phpcompatibility-wp"
    "${VENDOR_DIR}/phpcompatibility/phpcompatibility-paragonie"
    "${STANDARDS_DIR}"
)

# Add Uncanny_Automator sniffs if they exist
AUTOMATOR_SNIFFS_DIR="${SCRIPT_DIR}/../Uncanny-Owl/additional-sniffs/Uncanny_Automator"
if [[ -d "${AUTOMATOR_SNIFFS_DIR}" ]]; then
    debug "Found Uncanny_Automator sniffs at: ${AUTOMATOR_SNIFFS_DIR}"
    INSTALLED_PATHS+=("${AUTOMATOR_SNIFFS_DIR}")
fi

# Join paths with comma
INSTALLED_PATHS_STRING=$(IFS=,; echo "${INSTALLED_PATHS[*]}")
debug "Setting installed_paths to: ${INSTALLED_PATHS_STRING}"

# Configure PHPCS installed paths
"${PHPCS_BIN}" --config-set installed_paths "${INSTALLED_PATHS_STRING}"

RULESET_FILE="${STANDARDS_DIR}/ruleset.xml"
PHPCS_STANDARD="Uncanny-Owl"
PHPCS_ARGS=${@}
NEEDS_HELP="false"
BASEPATH="$(pwd)"

if [[ $# = 0 ]]; then
    NEEDS_HELP="true"
fi

if [ "${1}" = "-h" ] || [ "${1}" = "--h" ] || [ "${NEEDS_HELP}" = "true" ]
    then
        echo -e "${GREEN}Uncanny Owl Coding Standards${NC}\n"
        echo -e "USAGE: uocs [--strict] [phpcs-options] <path>\n"
        echo -e "${YELLOW}Options:${NC}"
        echo -e "  --strict    Use strict coding standards"
        echo -e "  --basepath  Set the base path for reporting (default: current directory)"
        echo -e "  --debug     Enable debug output"
        echo -e "\n${YELLOW}Commands:${NC}"
        echo -e "  <uocs>      Run the Uncanny Owl Coding Standards"
        echo -e "  <uocbf>     Attempt to fix sniffs against the Uncanny Owl Coding Standards"
        echo -e "\n${YELLOW}Arguments:${NC}"
        echo -e "  [phpcs-options] Any valid PHP_CodeSniffer argument"
        exit 0
fi

# Process arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --strict)
            PHPCS_STANDARD="Uncanny-Owl-Strict"
            shift
            ;;
        --basepath)
            BASEPATH="$(cd "$2" && pwd)"
            shift 2
            ;;
        --debug)
            DEBUG=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

# Create reports directory if it doesn't exist
REPORTS_DIR="${BASEPATH}/phpcs-reports"
mkdir -p "${REPORTS_DIR}"

echo -e "${YELLOW}Running PHP CodeSniffer with ${PHPCS_STANDARD} standard...${NC}\n"

# Run PHPCS with error handling
if ! "${PHPCS_BIN}" \
    --standard="${RULESET_FILE}" \
    --basepath="${BASEPATH}" \
    --ignore=*build*,*node_modules*,*vendor*,.git,.idea,.vscode \
    --report=full \
    --report-width=120 \
    --colors \
    --tab-width=4 \
    --encoding=utf-8 \
    --runtime-set ignore_warnings_on_exit 1 \
    ${PHPCS_ARGS}; then
    
    echo -e "\n${YELLOW}Found coding standard violations.${NC}"
    echo -e "Reports can be found in: ${REPORTS_DIR}"
    echo -e "\n${GREEN}Tip: Run 'uocbf' to attempt to fix the coding standard violations automatically.${NC}\n"
    exit 1
else
    echo -e "\n${GREEN}No coding standard violations found!${NC}\n"
fi
