#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if terminal supports colors
if [ -t 1 ]; then
    SUPPORTS_COLORS=1
else
    SUPPORTS_COLORS=0
fi

# Function to echo with color
colorize() {
    if [ $SUPPORTS_COLORS -eq 1 ]; then
        echo -e "$1$2${NC}"
    else
        echo "$2"
    fi
}

# Debug mode
DEBUG=${DEBUG:-0}

# Function to print debug information
debug() {
    if [ "$DEBUG" -eq 1 ]; then
        colorize "$YELLOW" "DEBUG: $1"
    fi
}

# Version
VERSION="1.1"

colorize "$GREEN" "Uncanny Owl Coding Standards\nVersion ${VERSION}\n"

# Get absolute path
get_absolute_path() {
    local path="$1"
    if [[ "$path" = /* ]]; then
        echo "$path"
    else
        echo "$(cd "$(dirname "$path")" && pwd)/$(basename "$path")"
    fi
}

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Try to find phpcbf in different locations
PHPCBF_LOCATIONS=(
    # Local installation
    "${SCRIPT_DIR}/../vendor/bin/phpcbf"
    # Composer global installation
    "${HOME}/.composer/vendor/bin/phpcbf"
    # Global installation
    "/usr/local/bin/phpcbf"
    # Windows Composer global installation
    "${APPDATA}/Composer/vendor/bin/phpcbf"
)

PHPCBF_BIN=""
for location in "${PHPCBF_LOCATIONS[@]}"; do
    if [[ -f "$location" ]]; then
        PHPCBF_BIN="$location"
        break
    elif [[ -f "${location}.bat" ]]; then
        PHPCBF_BIN="${location}.bat"
        break
    fi
done

if [ -z "${PHPCBF_BIN}" ]; then
    colorize "$RED" "Error: PHP_CodeSniffer not found!"
    colorize "$YELLOW" "Please ensure PHP_CodeSniffer is installed either:"
    echo "  - Locally via 'composer install'"
    echo "  - Globally via 'composer global require squizlabs/php_codesniffer'"
    exit 1
fi

# Check PHP_CodeSniffer version
PHPCS_VERSION=$("${PHPCBF_BIN}" --version | cut -d ' ' -f 3)
if [ $(echo "$PHPCS_VERSION" | cut -d. -f1) -lt 3 ]; then
    colorize "$RED" "Error: PHP_CodeSniffer version 3.0.0 or higher is required."
    exit 1
fi

# Try to find standards directory
STANDARDS_LOCATIONS=(
    # Local installation
    "${SCRIPT_DIR}/../Uncanny-Owl"
    # Composer global installation
    "${HOME}/.composer/vendor/uocs/uncanny-owl-coding-standards/Uncanny-Owl"
    # Global installation
    "/usr/local/share/uocs/Uncanny-Owl"
)

STANDARDS_DIR=""
for location in "${STANDARDS_LOCATIONS[@]}"; do
    if [[ -f "${location}/ruleset.xml" ]]; then
        STANDARDS_DIR="$location"
        break
    fi
done

if [ -z "${STANDARDS_DIR}" ]; then
    colorize "$RED" "Error: Uncanny Owl Coding Standards not found!"
    colorize "$YELLOW" "Please ensure the standards are properly installed."
    exit 1
fi

# Find vendor directory based on phpcbf location
VENDOR_DIR=$(dirname $(dirname "${PHPCBF_BIN}"))
debug "Vendor directory: ${VENDOR_DIR}"

# Set installed paths for standards
INSTALLED_PATHS=(
    "${VENDOR_DIR}/phpcsstandards/phpcsutils"
    "${VENDOR_DIR}/phpcsstandards/phpcsextra"
    "${VENDOR_DIR}/wp-coding-standards/wpcs"
    "${VENDOR_DIR}/phpcompatibility/php-compatibility"
    "${VENDOR_DIR}/phpcompatibility/phpcompatibility-wp"
    "${VENDOR_DIR}/phpcompatibility/phpcompatibility-paragonie"
    "${STANDARDS_DIR}"
)

# Add Uncanny_Automator sniffs if they exist
AUTOMATOR_SNIFFS_DIR="${SCRIPT_DIR}/../Uncanny-Owl/additional-sniffs/Uncanny_Automator"
if [[ -d "${AUTOMATOR_SNIFFS_DIR}" ]]; then
    debug "Found Uncanny_Automator sniffs at: ${AUTOMATOR_SNIFFS_DIR}"
    INSTALLED_PATHS+=("${AUTOMATOR_SNIFFS_DIR}")
fi

# Join paths with comma
INSTALLED_PATHS_STRING=$(IFS=,; echo "${INSTALLED_PATHS[*]}")
debug "Setting installed_paths to: ${INSTALLED_PATHS_STRING}"

# Configure PHPCS installed paths
"${PHPCBF_BIN}" --config-set installed_paths "${INSTALLED_PATHS_STRING}"

RULESET_FILE="${STANDARDS_DIR}/ruleset.xml"
PHPCS_STANDARD="Uncanny-Owl"
NEEDS_HELP="false"
TARGET_PATH=""
TARGET_DIR=""

if [[ $# = 0 ]]; then
    NEEDS_HELP="true"
fi

if [ "${1}" = "-h" ] || [ "${1}" = "--h" ] || [ "${NEEDS_HELP}" = "true" ]
    then
        colorize "$GREEN" "Uncanny Owl Coding Standards\n"
        echo -e "USAGE: uocbf [--strict] [phpcbf-options] <path>\n"
        colorize "$YELLOW" "Options:"
        echo -e "  --strict    Use strict coding standards"
        echo -e "  --debug     Enable debug output"
        echo -e "\n${YELLOW}Commands:${NC}"
        echo -e "  <uocs>      Run the Uncanny Owl Coding Standards"
        echo -e "  <uocbf>     Attempt to fix sniffs against the Uncanny Owl Coding Standards"
        echo -e "\n${YELLOW}Arguments:${NC}"
        echo -e "  [phpcbf-options] Any valid PHP_CodeSniffer Beautifier argument"
        exit 0
fi

# Process arguments
PHPCBF_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --strict)
            PHPCS_STANDARD="Uncanny-Owl-Strict"
            shift
            ;;
        --debug)
            DEBUG=1
            shift
            ;;
        *)
            # If it's a path and TARGET_PATH is not set, set it
            if [[ -e "$1" && -z "$TARGET_PATH" ]]; then
                TARGET_PATH="$(get_absolute_path "$1")"
                TARGET_DIR="$(dirname "$TARGET_PATH")"
            else
                PHPCBF_ARGS+=("$1")
            fi
            shift
            ;;
    esac
done

# If no target path was set but we have args, the last one might be the path
if [[ -z "$TARGET_PATH" && ${#PHPCBF_ARGS[@]} -gt 0 ]]; then
    LAST_ARG="${PHPCBF_ARGS[-1]}"
    if [[ -e "$LAST_ARG" ]]; then
        TARGET_PATH="$(get_absolute_path "$LAST_ARG")"
        TARGET_DIR="$(dirname "$TARGET_PATH")"
        unset 'PHPCBF_ARGS[-1]'
    fi
fi

if [[ -z "$TARGET_PATH" ]]; then
    colorize "$RED" "Error: No valid target path provided"
    exit 1
fi

debug "Target path: $TARGET_PATH"
debug "Target directory: $TARGET_DIR"
debug "PHPCBF binary: $PHPCBF_BIN"
debug "Standards directory: $STANDARDS_DIR"

colorize "$YELLOW" "Attempting to fix coding standard violations using ${PHPCS_STANDARD} standard...\n"

# Change to the target directory before running PHPCBF
cd "$TARGET_DIR" || exit 1

# Run PHPCBF with error handling
if ! "${PHPCBF_BIN}" \
    --standard="${RULESET_FILE}" \
    --ignore=*build*,*node_modules*,*vendor*,.git,.idea,.vscode \
    "${TARGET_PATH}" "${PHPCBF_ARGS[@]}"; then
    
    colorize "$YELLOW" "\nNote: Some violations may require manual fixes."
    colorize "$GREEN" "Run 'uocs' to see remaining violations.\n"
    exit 1
else
    colorize "$GREEN" "\nAll fixable coding standard violations have been addressed!\n"
fi
